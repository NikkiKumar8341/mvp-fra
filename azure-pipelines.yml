trigger: none

pool:
  name: on-prime

variables:
- group: common-variables
steps:

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'sonarqube'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '$(ssoreact-sonar)'
    cliProjectName: 'fra-sso-react-web'
    cliSources: '.'

- script: |
    cd usermanagement
    npm install reactstrap 
    npm install bootstrap
    npm install react-native-paper 
    npm install formik
    npm install react-router-dom
    npm install sass
    npm install yup
    npm install @react-google-maps/api
    npm run build
    ls -a
  displayName: 'npm install and build'

- task: SonarQubeAnalyze@5
  inputs:
    jdkversion: 'JAVA_HOME_17_X64'

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'


# - task: CopyFiles@2
#   inputs:
#     SourceFolder: '$(System.DefaultWorkingDirectory)'
#     Contents: '**/*build/*'
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'


# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'Build'
#     publishLocation: 'Container'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      currentVersion="$(fra-sso-react-web-version)"
      # currentVersion=$(echo "$artifactsuffix" | tr -d '[:space:]')
      echo "$currentVersion"
      # Split the version into major, minor, and patch parts
      IFS='.' read -ra versionParts <<< "$currentVersion"
      major=${versionParts[0]}
      minor=${versionParts[1]}
      patch=${versionParts[2]}
      echo "$major"
      echo "$minor"
      echo "$patch"

      # Increment the patch version
      ((patch++))
      # Construct the new version
      newVersion="$major.$minor.$patch"

      # Push the artifact to Nexus

      cd usermanagement
      ls -la 
      tar -cvf fra-sso-react-web-$newVersion.tar build
      NEXUS_URL="$(nexus_url)/repository/fra-sso-react-web2/fra-sso-react-web-$newVersion.tar"  # Replace with your Nexus repository URL
      USERNAME="$(nexus_username)"
      PASSWORD="$(nexus_password)"
      
      # Push the artifact to Nexus
      curl -v -u $USERNAME:$PASSWORD --upload-file fra-sso-react-web-$newVersion.tar $NEXUS_URL

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      currentVersion="$(fra-sso-react-web-version)"
      # currentVersion=$(echo "$artifactsuffix" | tr -d '[:space:]')
      echo "$currentVersion"
      # Split the version into major, minor, and patch parts
      IFS='.' read -ra versionParts <<< "$currentVersion"
      major=${versionParts[0]}
      minor=${versionParts[1]}
      patch=${versionParts[2]}
      echo "$major"
      echo "$minor"
      echo "$patch"

      # Increment the patch version
      ((patch++))
      # Construct the new version
      newVersion="$major.$minor.$patch"
      echo $(azurepat) | az devops login --organization https://dev.azure.com/mlmvps/
      az extension add --name azure-devops
      az extension update --name azure-devops
      az pipelines variable-group variable update \
      --group-id 2 \
      --name fra-sso-react-web-version \
      --value "$newVersion" \
      --org https://dev.azure.com/mlmvps/ \
      --project "Proximity-based Field Representative Allocation System"
    

